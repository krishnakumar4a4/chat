->Good information for building a server, explained gen_supervisor,funs,gen_tcp well. But not much clear about gen_fsm<-
https://erlangcentral.org/wiki/index.php?title=Building_a_Non-blocking_TCP_server_using_OTP_principles
->Mnesia,gen_tcp explained well part of bank_server example<-
http://erlangcentral.org/frame/?href=http%3A%2F%2Fwww.sics.se%2F~joe%2Ftutorials%2Frobust_server%2Frobust_server.html#.Vf422d9CrDf

GEN_TCP:

gen_tcp:listen(Port, Options) -> {ok, ListenSocket} | {error, Reason}
  Sets up a socket to listen on the port Port on the local host.
accept(ListenSocket) -> {ok, Socket} | {error, Reason}
accept(ListenSocket, Timeout) -> {ok, Socket} | {error, Reason}
  Accepts an incoming connection request on a listen socket. Socket must be a socket returned from listen/2. Timeout specifies a timeout value in ms, defaults to infinity.
send(Socket, Packet) -> ok | {error, Reason}
  Sends a packet on a socket.
recv(Socket, Length) -> {ok, Packet} | {error, Reason}
recv(Socket, Length, Timeout) -> {ok, Packet} | {error, Reason}
  This function receives a packet from a socket in passive mode. A closed socket is indicated by a return value {error, closed}.
controlling_process(Socket, Pid) -> ok | {error, Reason}
  Assigns a new controlling process Pid to Socket. The controlling process is the process which receives messages from the socket. If called by any other process than the current controlling process, {error, not_owner} is returned.
close(Socket) -> ok
  Closes a TCP socket.
shutdown(Socket, How) -> ok | {error, Reason}
  Close a socket in one or two directions.

ERL:
erl
  The erl program starts an Erlang runtime system.
  -boot File  Specifies the name of the boot file, File.boot, which is used to start the system. See init(3). Unless File contains an absolute path, the system searches for File.boot in the current and $ROOT/bin directories.
  -config Config Specifies the name of a configuration file, Config.config, which is used to configure applications
  -detached Starts the Erlang runtime system detached from the system console. Useful for running daemons and backgrounds processes. Implies -noinput.
  -

Connect nodes to communicate
  Links: https://www.ejabberd.im/interconnect-erl-nodes
  start the each of the erl nodes with a name(one with krishna and other with kumar)
  >erl -sname krishna  and erl -sname kumar
  We can find the node name of each with following command
  >node().
  Try connecting the other with the following command, we should get the respinse as pong,if connected
  >net_adm:ping('kumar@hostname').
  check on both sides with 
  >nodes().
  Now if we start a server globally on one node, it will be available on the other node. Check it using
  >global:registered_names().
  If we want to register your own PID globally. Should return yes.
  >global:register_name(name_atom,self()).
  
Some errors 
  {error,enotsock} -> error got resolved when gen_tcp:recv is placed after client link receive.
  {error,einval} -> give the parameters exactly the same on both side i.e for conenct and listen, always start listen and accept before send connect

I faced a problem while getting the broadcast messages from the server, as the client getting blocked for incoming broadcast
messages with prompt.
So I figured out a way to spawn one more gen server process in a separate shell(slave), which only listens for incoming broadcasts.

so I started a slave process with the following command line options 
erl -sname slave -s lslave start_slave slave -noshell
which globally registers slave process as slave for a listening gen_server process.
