1>mnesia:start().
10> mnesia:create_table(mafia_app,[{attributes,record_info(fields,mafia_app)}]). 
{atomic,ok}
11> mnesia:dirty_write(mafia_app,#mafia_app{name="krishna",op="kill"}).
ok
12> mnesia:dirty_read({mafia_app,"krishna"}).                          
[#mafia_app{name = "krishna",op = "kill"}]
13> mnesia:dirty_read({mafia_app,"kill"}).   
[]
14> mnesia:dirty_read({mafia_app,"krishna"}).
[#mafia_app{name = "krishna",op = "kill"}]
20> mnesia:system_info().                                                   
===> System info in version "4.13", debug level = none <===
opt_disc. Directory "c:/Program Files/erl7.0/usr/Mnesia.nonode@nohost" is NOT used.
use fallback at restart = false
running db nodes   = [nonode@nohost]
stopped db nodes   = [] 
master node tables = []
remote             = []
ram_copies         = [mafia_app,schema]
disc_copies        = []
disc_only_copies   = []
[{nonode@nohost,ram_copies}] = [schema,mafia_app]
3 transactions committed, 4 aborted, 0 restarted, 0 logged to disc
0 held locks, 0 in queue; 0 local transactions, 0 remote
0 transactions waits for other nodes: []
yes
21> mnesia:dirty_read({mafia_app,"krishna"}).                               
[#mafia_app{name = "krishna",op = "kill"}]
27> mnesia:create_table(mafia,[{attributes,record_info(fields,mafia)}]).
{atomic,ok}
28> mnesia:dirty_write(mafia,#mafia{services=cooking,expertise=everything,spent="lifetime"}).
ok
29> mnesia:dirty_write(mafia,#mafia{services=tech,expertise=something,spent="partial"}).     
ok
30> mnesia:dirty_read({mafia,tech}).
[#mafia{services = tech,expertise = something,
        spent = "partial"}]
31> mnesia:dirty_read({mafia,something}).
[]
32> mnesia:dirty_read({mafia,cooking}).  
[#mafia{services = cooking,expertise = everything,
        spent = "lifetime"}]
133> mnesia:dirty_index_read(xmlElement,"ietf-netconf-monitoring.yin",expanded_name).
--creating differnet table name irrespective record
mnesia:create_table(yang_db,[{index,[#xmlElement.expanded_name]},{attributes,record_info(fields,xmlElement)},{type,bag},{record_name, xmlElement}]).

----Creating disc_only_copies with mnesia-----
->erl -mnesia dir "'location/to/mnesia/dir'"          <-starts an erl node with mnesia directory pre-set
->mnesia:create_schema(nodes()).                      <-Create a schema on all the connected erl nodes
            (or)
->mnesia:create_schema([node()]).                     <-Create a schema on current erl node 
->mnesia:create_table(my_db,[{index,[#xmlElement.expanded_name]},{attributes,record_info(fields,xmlElement)},{type,bag},{record_name,xmlElement},{disc_only_copies,[node()]}}]).   <-create a table with my_db name which stores xmlElement records as disc_only_copies, mnesia dir and schema creation should be done beforehand.

--Using match_object on ETS
34> ets:new(krik2,[bag,named_table]),ets:insert(krik2,{sim,v2,ne01,"hi"}),ets:insert(krik2,{sim,v2,ne02,"hello"}),ets:insert(krik2,{sim,v1,ne03,"hey"}),ets:insert(krik2,{sim,v1,ne04,"man"}),ets:insert(krik2,{sim1,v1,ne01,"manning"}).
true
35> ets:match_object(krik2,{sim,v1,'_','_'}).
[{sim,v1,ne03,"hey"},{sim,v1,ne04,"man"}]
